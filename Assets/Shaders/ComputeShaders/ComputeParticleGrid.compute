#pragma kernel CSMain

#define threads_per_group_x 8
#define threads_per_group_y 8
#define threads_per_group_z 8

// struct representing the data of a single particle
struct particle
{
	float3 pos;
	float3 col;
};

RWStructuredBuffer<particle> particleMapBuffer;	// 1 dimensional array of particles
int numThreadGroups;	// total number of thread groups
float time;		// current time, for animation
float spacing;	// spacing between particles

[numthreads(threads_per_group_x, threads_per_group_y, threads_per_group_z)]
void CSMain(uint3 dispatchID : SV_DispatchThreadID)
{
	// calculate total threads in the each dimension of whole box volume
	int totalThreadsX = threads_per_group_x * numThreadGroups;
	int totalThreadsY = threads_per_group_y * numThreadGroups;

	// calculate the ID of this particle in the 1 dimensional array (flatten out 3D dispatch coordinates)
	int bufferID = dispatchID.x + dispatchID.y * totalThreadsX + dispatchID.z * totalThreadsX * totalThreadsY;

	// set particle's position
	particleMapBuffer[bufferID].pos = float3(
		(float)	dispatchID.x * spacing,
		(float)	dispatchID.y * spacing,
		(float)	dispatchID.z * spacing
		);

	// set particle's colour
	particleMapBuffer[bufferID].col = float3(1.0, 1.0, 1.0);
}
